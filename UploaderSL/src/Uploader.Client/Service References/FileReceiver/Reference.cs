//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

//
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40818.0
//
namespace Uploader.Client.FileReceiver {
    using System.Runtime.Serialization;


    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChunkUploadRequest", Namespace="http://schemas.datacontract.org/2004/07/UploaderSL.Web.Services")]
    public partial class ChunkUploadRequest : object, System.ComponentModel.INotifyPropertyChanged {

        private byte[] ChunkField;

        private int ChunkSizeField;

        private string HashField;

        private System.Guid TokenField;

        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Chunk {
            get {
                return this.ChunkField;
            }
            set {
                if ((object.ReferenceEquals(this.ChunkField, value) != true)) {
                    this.ChunkField = value;
                    this.RaisePropertyChanged("Chunk");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChunkSize {
            get {
                return this.ChunkSizeField;
            }
            set {
                if ((this.ChunkSizeField.Equals(value) != true)) {
                    this.ChunkSizeField = value;
                    this.RaisePropertyChanged("ChunkSize");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Hash {
            get {
                return this.HashField;
            }
            set {
                if ((object.ReferenceEquals(this.HashField, value) != true)) {
                    this.HashField = value;
                    this.RaisePropertyChanged("Hash");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Token {
            get {
                return this.TokenField;
            }
            set {
                if ((this.TokenField.Equals(value) != true)) {
                    this.TokenField = value;
                    this.RaisePropertyChanged("Token");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResponseBase", Namespace="http://schemas.datacontract.org/2004/07/UploaderSL.Web.Services")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Uploader.Client.FileReceiver.FinishResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Uploader.Client.FileReceiver.UploadResponse))]
    public partial class ResponseBase : object, System.ComponentModel.INotifyPropertyChanged {

        private string MessageField;

        private Uploader.Client.FileReceiver.EnumsResponsStatus StatusField;

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public Uploader.Client.FileReceiver.EnumsResponsStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FinishResponse", Namespace="http://schemas.datacontract.org/2004/07/UploaderSL.Web.Services")]
    public partial class FinishResponse : Uploader.Client.FileReceiver.ResponseBase {

        private string NewFilenameField;

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NewFilename {
            get {
                return this.NewFilenameField;
            }
            set {
                if ((object.ReferenceEquals(this.NewFilenameField, value) != true)) {
                    this.NewFilenameField = value;
                    this.RaisePropertyChanged("NewFilename");
                }
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UploadResponse", Namespace="http://schemas.datacontract.org/2004/07/UploaderSL.Web.Services")]
    public partial class UploadResponse : Uploader.Client.FileReceiver.ResponseBase {

        private System.Guid TokenField;

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Token {
            get {
                return this.TokenField;
            }
            set {
                if ((this.TokenField.Equals(value) != true)) {
                    this.TokenField = value;
                    this.RaisePropertyChanged("Token");
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Enums.ResponsStatus", Namespace="http://schemas.datacontract.org/2004/07/UploaderSL.Web.Services")]
    public enum EnumsResponsStatus : int {

        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotSet = 0,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 1,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        Fail = 20,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        FailFullHashCheck = 21,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        FailChunkHashCheck = 22,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        FailAuthentication = 23,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        FailTracker = 24,
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FinishRequest", Namespace="http://schemas.datacontract.org/2004/07/UploaderSL.Web.Services")]
    public partial class FinishRequest : object, System.ComponentModel.INotifyPropertyChanged {

        private Uploader.Client.FileReceiver.Credentials CredentialsField;

        private string ExtensionField;

        private string FullHashField;

        private System.Guid TokenField;

        [System.Runtime.Serialization.DataMemberAttribute()]
        public Uploader.Client.FileReceiver.Credentials Credentials {
            get {
                return this.CredentialsField;
            }
            set {
                if ((object.ReferenceEquals(this.CredentialsField, value) != true)) {
                    this.CredentialsField = value;
                    this.RaisePropertyChanged("Credentials");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Extension {
            get {
                return this.ExtensionField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtensionField, value) != true)) {
                    this.ExtensionField = value;
                    this.RaisePropertyChanged("Extension");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullHash {
            get {
                return this.FullHashField;
            }
            set {
                if ((object.ReferenceEquals(this.FullHashField, value) != true)) {
                    this.FullHashField = value;
                    this.RaisePropertyChanged("FullHash");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Token {
            get {
                return this.TokenField;
            }
            set {
                if ((this.TokenField.Equals(value) != true)) {
                    this.TokenField = value;
                    this.RaisePropertyChanged("Token");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Credentials", Namespace="http://schemas.datacontract.org/2004/07/UploaderSL.Web.Services")]
    public partial class Credentials : object, System.ComponentModel.INotifyPropertyChanged {

        private string PasswordField;

        private string UsernameField;

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileReceiver.IFileReceiver")]
    public interface IFileReceiver {

        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileReceiver/BeginUpload", ReplyAction="http://tempuri.org/IFileReceiver/BeginUploadResponse")]
        System.IAsyncResult BeginBeginUpload(Uploader.Client.FileReceiver.ChunkUploadRequest request, System.AsyncCallback callback, object asyncState);

        Uploader.Client.FileReceiver.UploadResponse EndBeginUpload(System.IAsyncResult result);

        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileReceiver/ContinueUpload", ReplyAction="http://tempuri.org/IFileReceiver/ContinueUploadResponse")]
        System.IAsyncResult BeginContinueUpload(Uploader.Client.FileReceiver.ChunkUploadRequest request, System.AsyncCallback callback, object asyncState);

        Uploader.Client.FileReceiver.UploadResponse EndContinueUpload(System.IAsyncResult result);

        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileReceiver/FinishUpload", ReplyAction="http://tempuri.org/IFileReceiver/FinishUploadResponse")]
        System.IAsyncResult BeginFinishUpload(Uploader.Client.FileReceiver.FinishRequest request, System.AsyncCallback callback, object asyncState);

        Uploader.Client.FileReceiver.FinishResponse EndFinishUpload(System.IAsyncResult result);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileReceiverChannel : Uploader.Client.FileReceiver.IFileReceiver, System.ServiceModel.IClientChannel {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BeginUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        public BeginUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState) {
            this.results = results;
        }

        public Uploader.Client.FileReceiver.UploadResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Uploader.Client.FileReceiver.UploadResponse)(this.results[0]));
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContinueUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        public ContinueUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState) {
            this.results = results;
        }

        public Uploader.Client.FileReceiver.UploadResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Uploader.Client.FileReceiver.UploadResponse)(this.results[0]));
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FinishUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        public FinishUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState) {
            this.results = results;
        }

        public Uploader.Client.FileReceiver.FinishResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Uploader.Client.FileReceiver.FinishResponse)(this.results[0]));
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileReceiverClient : System.ServiceModel.ClientBase<Uploader.Client.FileReceiver.IFileReceiver>, Uploader.Client.FileReceiver.IFileReceiver {

        private BeginOperationDelegate onBeginBeginUploadDelegate;

        private EndOperationDelegate onEndBeginUploadDelegate;

        private System.Threading.SendOrPostCallback onBeginUploadCompletedDelegate;

        private BeginOperationDelegate onBeginContinueUploadDelegate;

        private EndOperationDelegate onEndContinueUploadDelegate;

        private System.Threading.SendOrPostCallback onContinueUploadCompletedDelegate;

        private BeginOperationDelegate onBeginFinishUploadDelegate;

        private EndOperationDelegate onEndFinishUploadDelegate;

        private System.Threading.SendOrPostCallback onFinishUploadCompletedDelegate;

        private BeginOperationDelegate onBeginOpenDelegate;

        private EndOperationDelegate onEndOpenDelegate;

        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;

        private BeginOperationDelegate onBeginCloseDelegate;

        private EndOperationDelegate onEndCloseDelegate;

        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;

        public FileReceiverClient() {
        }

        public FileReceiverClient(string endpointConfigurationName) :
                base(endpointConfigurationName) {
        }

        public FileReceiverClient(string endpointConfigurationName, string remoteAddress) :
                base(endpointConfigurationName, remoteAddress) {
        }

        public FileReceiverClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
                base(endpointConfigurationName, remoteAddress) {
        }

        public FileReceiverClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
                base(binding, remoteAddress) {
        }

        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }

        public event System.EventHandler<BeginUploadCompletedEventArgs> BeginUploadCompleted;

        public event System.EventHandler<ContinueUploadCompletedEventArgs> ContinueUploadCompleted;

        public event System.EventHandler<FinishUploadCompletedEventArgs> FinishUploadCompleted;

        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;

        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Uploader.Client.FileReceiver.IFileReceiver.BeginBeginUpload(Uploader.Client.FileReceiver.ChunkUploadRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBeginUpload(request, callback, asyncState);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Uploader.Client.FileReceiver.UploadResponse Uploader.Client.FileReceiver.IFileReceiver.EndBeginUpload(System.IAsyncResult result) {
            return base.Channel.EndBeginUpload(result);
        }

        private System.IAsyncResult OnBeginBeginUpload(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Uploader.Client.FileReceiver.ChunkUploadRequest request = ((Uploader.Client.FileReceiver.ChunkUploadRequest)(inValues[0]));
            return ((Uploader.Client.FileReceiver.IFileReceiver)(this)).BeginBeginUpload(request, callback, asyncState);
        }

        private object[] OnEndBeginUpload(System.IAsyncResult result) {
            Uploader.Client.FileReceiver.UploadResponse retVal = ((Uploader.Client.FileReceiver.IFileReceiver)(this)).EndBeginUpload(result);
            return new object[] {
                    retVal};
        }

        private void OnBeginUploadCompleted(object state) {
            if ((this.BeginUploadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BeginUploadCompleted(this, new BeginUploadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }

        public void BeginUploadAsync(Uploader.Client.FileReceiver.ChunkUploadRequest request) {
            this.BeginUploadAsync(request, null);
        }

        public void BeginUploadAsync(Uploader.Client.FileReceiver.ChunkUploadRequest request, object userState) {
            if ((this.onBeginBeginUploadDelegate == null)) {
                this.onBeginBeginUploadDelegate = new BeginOperationDelegate(this.OnBeginBeginUpload);
            }
            if ((this.onEndBeginUploadDelegate == null)) {
                this.onEndBeginUploadDelegate = new EndOperationDelegate(this.OnEndBeginUpload);
            }
            if ((this.onBeginUploadCompletedDelegate == null)) {
                this.onBeginUploadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBeginUploadCompleted);
            }
            base.InvokeAsync(this.onBeginBeginUploadDelegate, new object[] {
                        request}, this.onEndBeginUploadDelegate, this.onBeginUploadCompletedDelegate, userState);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Uploader.Client.FileReceiver.IFileReceiver.BeginContinueUpload(Uploader.Client.FileReceiver.ChunkUploadRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginContinueUpload(request, callback, asyncState);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Uploader.Client.FileReceiver.UploadResponse Uploader.Client.FileReceiver.IFileReceiver.EndContinueUpload(System.IAsyncResult result) {
            return base.Channel.EndContinueUpload(result);
        }

        private System.IAsyncResult OnBeginContinueUpload(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Uploader.Client.FileReceiver.ChunkUploadRequest request = ((Uploader.Client.FileReceiver.ChunkUploadRequest)(inValues[0]));
            return ((Uploader.Client.FileReceiver.IFileReceiver)(this)).BeginContinueUpload(request, callback, asyncState);
        }

        private object[] OnEndContinueUpload(System.IAsyncResult result) {
            Uploader.Client.FileReceiver.UploadResponse retVal = ((Uploader.Client.FileReceiver.IFileReceiver)(this)).EndContinueUpload(result);
            return new object[] {
                    retVal};
        }

        private void OnContinueUploadCompleted(object state) {
            if ((this.ContinueUploadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ContinueUploadCompleted(this, new ContinueUploadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }

        public void ContinueUploadAsync(Uploader.Client.FileReceiver.ChunkUploadRequest request) {
            this.ContinueUploadAsync(request, null);
        }

        public void ContinueUploadAsync(Uploader.Client.FileReceiver.ChunkUploadRequest request, object userState) {
            if ((this.onBeginContinueUploadDelegate == null)) {
                this.onBeginContinueUploadDelegate = new BeginOperationDelegate(this.OnBeginContinueUpload);
            }
            if ((this.onEndContinueUploadDelegate == null)) {
                this.onEndContinueUploadDelegate = new EndOperationDelegate(this.OnEndContinueUpload);
            }
            if ((this.onContinueUploadCompletedDelegate == null)) {
                this.onContinueUploadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnContinueUploadCompleted);
            }
            base.InvokeAsync(this.onBeginContinueUploadDelegate, new object[] {
                        request}, this.onEndContinueUploadDelegate, this.onContinueUploadCompletedDelegate, userState);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Uploader.Client.FileReceiver.IFileReceiver.BeginFinishUpload(Uploader.Client.FileReceiver.FinishRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFinishUpload(request, callback, asyncState);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Uploader.Client.FileReceiver.FinishResponse Uploader.Client.FileReceiver.IFileReceiver.EndFinishUpload(System.IAsyncResult result) {
            return base.Channel.EndFinishUpload(result);
        }

        private System.IAsyncResult OnBeginFinishUpload(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Uploader.Client.FileReceiver.FinishRequest request = ((Uploader.Client.FileReceiver.FinishRequest)(inValues[0]));
            return ((Uploader.Client.FileReceiver.IFileReceiver)(this)).BeginFinishUpload(request, callback, asyncState);
        }

        private object[] OnEndFinishUpload(System.IAsyncResult result) {
            Uploader.Client.FileReceiver.FinishResponse retVal = ((Uploader.Client.FileReceiver.IFileReceiver)(this)).EndFinishUpload(result);
            return new object[] {
                    retVal};
        }

        private void OnFinishUploadCompleted(object state) {
            if ((this.FinishUploadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FinishUploadCompleted(this, new FinishUploadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }

        public void FinishUploadAsync(Uploader.Client.FileReceiver.FinishRequest request) {
            this.FinishUploadAsync(request, null);
        }

        public void FinishUploadAsync(Uploader.Client.FileReceiver.FinishRequest request, object userState) {
            if ((this.onBeginFinishUploadDelegate == null)) {
                this.onBeginFinishUploadDelegate = new BeginOperationDelegate(this.OnBeginFinishUpload);
            }
            if ((this.onEndFinishUploadDelegate == null)) {
                this.onEndFinishUploadDelegate = new EndOperationDelegate(this.OnEndFinishUpload);
            }
            if ((this.onFinishUploadCompletedDelegate == null)) {
                this.onFinishUploadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFinishUploadCompleted);
            }
            base.InvokeAsync(this.onBeginFinishUploadDelegate, new object[] {
                        request}, this.onEndFinishUploadDelegate, this.onFinishUploadCompletedDelegate, userState);
        }

        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }

        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }

        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }

        public void OpenAsync() {
            this.OpenAsync(null);
        }

        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }

        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }

        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }

        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }

        public void CloseAsync() {
            this.CloseAsync(null);
        }

        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }

        protected override Uploader.Client.FileReceiver.IFileReceiver CreateChannel() {
            return new FileReceiverClientChannel(this);
        }

        private class FileReceiverClientChannel : ChannelBase<Uploader.Client.FileReceiver.IFileReceiver>, Uploader.Client.FileReceiver.IFileReceiver {

            public FileReceiverClientChannel(System.ServiceModel.ClientBase<Uploader.Client.FileReceiver.IFileReceiver> client) :
                    base(client) {
            }

            public System.IAsyncResult BeginBeginUpload(Uploader.Client.FileReceiver.ChunkUploadRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("BeginUpload", _args, callback, asyncState);
                return _result;
            }

            public Uploader.Client.FileReceiver.UploadResponse EndBeginUpload(System.IAsyncResult result) {
                object[] _args = new object[0];
                Uploader.Client.FileReceiver.UploadResponse _result = ((Uploader.Client.FileReceiver.UploadResponse)(base.EndInvoke("BeginUpload", _args, result)));
                return _result;
            }

            public System.IAsyncResult BeginContinueUpload(Uploader.Client.FileReceiver.ChunkUploadRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("ContinueUpload", _args, callback, asyncState);
                return _result;
            }

            public Uploader.Client.FileReceiver.UploadResponse EndContinueUpload(System.IAsyncResult result) {
                object[] _args = new object[0];
                Uploader.Client.FileReceiver.UploadResponse _result = ((Uploader.Client.FileReceiver.UploadResponse)(base.EndInvoke("ContinueUpload", _args, result)));
                return _result;
            }

            public System.IAsyncResult BeginFinishUpload(Uploader.Client.FileReceiver.FinishRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("FinishUpload", _args, callback, asyncState);
                return _result;
            }

            public Uploader.Client.FileReceiver.FinishResponse EndFinishUpload(System.IAsyncResult result) {
                object[] _args = new object[0];
                Uploader.Client.FileReceiver.FinishResponse _result = ((Uploader.Client.FileReceiver.FinishResponse)(base.EndInvoke("FinishUpload", _args, result)));
                return _result;
            }
        }
    }
}
